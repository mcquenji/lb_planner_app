name: "Flutter build"
on:
  release:
    types: [published]
    branches: ['app']
  workflow_dispatch:
jobs:
  # linux_build:
  #   name: "Linux build"
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: "Checkout repo"
  #       uses: actions/checkout@v3
  #     - name: "Setup flutter"
  #       uses: subosito/flutter-action@v2
  #       with:
  #         flutter-version: '3.3.3'
  #         architecture: x64
  #     - name: "Install dependencies"
  #       run: |
  #         sudo apt-get update -y
  #         sudo apt-get install -y ninja-build libgtk-3-dev
  #     - name: "Build"
  #       run: |
  #         flutter config --enable-linux-desktop
  #         flutter build linux --release --no-sound-null-safety
  #     - name: Archive production artifacts
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: lb-planner-linux
  #         path: build/linux/x64/release/bundle/*
  #windows_build:
  #   name: "Windows build"
  #   runs-on: windows-latest
  #   steps:
  #     - name: "Checkout repo"
  #       uses: actions/checkout@v3
  #     - name: "Setup flutter"
  #       uses: subosito/flutter-action@v2
  #       with:
  #         flutter-version: '3.3.3'
  #         architecture: x64
  #     - name: "Build"
  #       run: |
  #         flutter config --enable-windows-desktop
  #         flutter build windows --release --no-sound-null-safety
  #     - name: "Inno Setup"
  #       uses: callebstrom/inno-setup-cli@v6.2.1        
  #     - name: Archive production artifacts
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: lb-planner-windows
  #         path: build\windows\runner\Release\*
  # macos_build:
  #   name: "MacOS build"
  #   runs-on: macos-latest
  #   steps:
  #     - name: "Checkout repo"
  #       uses: actions/checkout@v3
  #     - name: "Setup flutter"
  #       uses: subosito/flutter-action@v2
  #       with:
  #         flutter-version: '3.3.3'
  #         architecture: x64
  #     - name: "Build"
  #       run: |
  #         flutter config --enable-macos-desktop
  #         flutter build macos --release --no-sound-null-safety
  #     - name: Create dmg
  #       uses: QQxiaoming/create-dmg-action@v0.0.2
  #       with:
  #         name: 'LB.Planner.Setup'
  #         srcdir: '/Users/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/build/macos/Build//Products/Release/desktop_build.app'
  #     - name: Archive production artifacts
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: lb-planner-macos
  #         path: /Users/runner/work/lb_planner/lb_planner/LB.Planner.Setup.dmg
  #     #- name: Upload
  #     #  uses: djn24/add-asset-to-release@v1
  #     #  with:
  #     #    token: ${{secrets.GITHUB_TOKEN}}
  #     #    path: 'path/to/binary'

  appimage_build:
    name: "AppImage build"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Setup flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.3.3'
          architecture: x64
      - name: Update the system
        run: sudo apt-get update && sudo apt-get upgrade -y
      # - name: Install dependencies
      #   run: sudo apt-get update && sudo apt-get install -y git cmake qt5-default
      - name: Install dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ninja-build libgtk-3-dev
          sudo apt-get install fuse libfuse2
          sudo apt-get install -y appstream

      - name: Build the Flutter app
        run: |
          flutter config --enable-linux-desktop
          flutter build linux --release --no-sound-null-safety

      - name: Install AppImage Tool
        run: |
          wget -c https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool-x86_64.AppImage
          sudo mv appimagetool-x86_64.AppImage /usr/local/bin/appimagetool

      - name: Create the required directories and copy the binary files to the AppDir
        run: |
          mkdir -p ~/App/LB_Planner.AppDir/usr/bin
          
          cp build/linux/x64/release/bundle/lb_planner ~/App/LB_Planner.AppDir/usr/bin/

          cp app_icon.png ~/App/LB_Planner.AppDir/app_icon.png

      - name: Create the Desktop file
        run: |
          echo "[Desktop Entry]
          Name=LB Planner
          Exec=lb_planner
          Icon=app_icon
          Type=Application
          Categories=Education;" > ~/App/LB_Planner.AppDir/lb_planner.desktop


          chmod +x ~/App/LB_Planner.AppDir/lb_planner.desktop

      - name: Create the AppRun file
        run: |
          echo '#!/bin/bash
          SELF=$(readlink -f "\$0")
          HERE=${SELF%/*}
          EXEC="${HERE}/usr/bin/lb_planner"
          exec "${EXEC}" ' > ~/App/LB_Planner.AppDir/AppRun


          chmod +x ~/App/LB_Planner.AppDir/AppRun

          ls ~/App/LB_Planner.AppDir

      - name: Create the AppImage
        run: ARCH=x86_64 appimagetool ~/App/LB_Planner.AppDir

      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: lb-planner-appimage
          path: ~/App/LB_Planner.AppDir/*.AppImage
        


        
